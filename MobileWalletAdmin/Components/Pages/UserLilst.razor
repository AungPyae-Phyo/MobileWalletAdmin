@page "/user-lists"
@using MobileWalletAdmin.Enum
@using MobileWalletAdmin.Helper
@using MobileWalletAdmin.Models
@using MobileWalletAdmin.Models.Users
@using MobileWalletAdmin.Services
@inject UserService UserService
@using System.Linq
<PageTitle>User Lists</PageTitle>
<MudText Typo="Typo.h3" GutterBottom="true">User Management</MudText>

@if (users == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <div style="min-width: 1200px;">
        <MudTable Items="@filteredUsers" Hover="true" SortLabel="Sort By" Elevation="0"
                  AllowUnsorted="false" Dense="false" Breakpoint="Breakpoint.None" Style="width: 100%;">
            <ToolBarContent>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search..."
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium" Immediate="true" OnInput="@(() => OnSearch(searchString))" />
            </ToolBarContent>

            <HeaderContent>
                <MudTh>No.</MudTh>
                <MudTh><MudTableSortLabel SortBy="@((UserModel x) => x.createdOn)">Registration Date</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="@((UserModel x) => x.UserName)">User Name</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="@((UserModel x) => x.PhoneNumber)">Phone Number</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="@((UserModel x) => x.Email)">Email</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="@((UserModel x) => x.Role)">Role</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="@((UserModel x) => x.Status)">KYC Status</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="@((UserModel x) => x.DocumentType)">Document Type</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="@((UserModel x) => x.WalletID)">Account Number</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="@((UserModel x) => x.Balance)">Balance</MudTableSortLabel></MudTh>
            </HeaderContent>

            <RowTemplate Context="user">
                <MudTd>@(filteredUsers.IndexOf(user) + 1)</MudTd>
                <MudTd>@user.createdOn.ToString("dd/MM/yyyy HH:mm:ss")</MudTd>
                <MudTd>@user.UserName</MudTd>
                <MudTd>@user.PhoneNumber</MudTd>
                <MudTd>@user.Email</MudTd>
                <MudTd>@user.Role</MudTd>
                <MudTd>@GetStatusChip(user.Status)</MudTd>
                <MudTd>@EnumHelper.GetEnumDescription(user.DocumentType)</MudTd>
                <MudTd>@FormatAsBankAccount(user.WalletID)</MudTd>
                <MudTd>$@user.Balance.ToString("N0")</MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </div>
}

@code {
    private List<UserModel> users = new();
    private List<UserModel> filteredUsers = new();
    private string searchString = "";
    private CancellationTokenSource? _cts;

    protected override async Task OnInitializedAsync()
    {
        _cts = new CancellationTokenSource();
        Console.WriteLine("Initializing User List...");
        try
        {
            users = await UserService.GetAll(_cts.Token);
            filteredUsers = users.ToList();
            Console.WriteLine($"Fetched {users.Count} users");
            await InvokeAsync(StateHasChanged);
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("Operation was canceled.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private RenderFragment GetStatusChip(BankStatus status) => builder =>
    {
        var statusText = EnumHelper.GetEnumDescription(status);
        var (color, icon) = GetStatusStyle(status);
        builder.OpenComponent<MudChip<string>>(0); 
        builder.AddAttribute(1, "Color", color);
        builder.AddAttribute(2, "Variant", Variant.Text);
        builder.AddAttribute(3, "Style", "border-radius: 9px; margin: 4px;");
        builder.AddAttribute(4, "ChildContent", (RenderFragment)(chipBuilder =>
        {
            if (!string.IsNullOrEmpty(icon))
            {
                chipBuilder.OpenComponent<MudIcon>(0);
                chipBuilder.AddAttribute(1, "Icon", icon);
                chipBuilder.AddAttribute(2, "Style", "font-size: 16px; margin-right: 4px;");
                chipBuilder.CloseComponent();
            }
            chipBuilder.AddContent(4, statusText);
        }));
        builder.CloseComponent();
    };

    private (Color Color, string Icon) GetStatusStyle(BankStatus status)
    {
        Console.WriteLine($"Processing status: {status}");
        return status switch
        {
            BankStatus.NEW_USER => (Color.Default, Icons.Material.Filled.Person),
            BankStatus.ACTIVE => (Color.Success, Icons.Material.Filled.CheckCircle),
            BankStatus.INACTIVE => (Color.Default, Icons.Material.Filled.PersonOff),
            BankStatus.PENDING => (Color.Warning, Icons.Material.Filled.Pending),
            BankStatus.SUSPENDED => (Color.Error, Icons.Material.Filled.Block),
            BankStatus.APPROVE => (Color.Info, Icons.Material.Filled.Verified),
            BankStatus.REJECT => (Color.Error, Icons.Material.Filled.Cancel),
            _ => (Color.Default, Icons.Material.Filled.Help)
        };
    }
    // For Guid input
    private string FormatAsBankAccount(Guid walletId)
    {
        byte[] guidBytes = walletId.ToByteArray();
        long numericValue = BitConverter.ToInt64(guidBytes, 0) ^ BitConverter.ToInt64(guidBytes, 8);
        long positiveValue = Math.Abs(numericValue);
        string accountNumber = (positiveValue % 100000000000000).ToString("D14");

        // Format with hyphens: XXXX-XXXX-XXXXXX
        return $"{accountNumber.Substring(0, 4)}-{accountNumber.Substring(4, 4)}-{accountNumber.Substring(8, 6)}";
    }

    private string FormatAsBankAccount(string walletIdString)
    {
        // Handle null or empty string
        if (string.IsNullOrWhiteSpace(walletIdString))
        {
            return "INVALID_ID";
        }

        // Try to parse as Guid
        if (Guid.TryParse(walletIdString, out Guid walletId))
        {
            return FormatAsBankAccount(walletId); // Use the Guid version
        }

        return "INVALID_ID";
    }

    private void OnSearch(string text)
    {
        Console.WriteLine($"Search input: {text}");
        searchString = text;
        if (string.IsNullOrWhiteSpace(searchString))
        {
            filteredUsers = users.ToList();
        }
        else
        {
            filteredUsers = users.Where(x =>
                (x.UserName?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (x.Email?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (x.PhoneNumber?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (FormatAsBankAccount(x.WalletID).Replace("-", "").Contains(searchString)) ||
                (x.Role?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                EnumHelper.GetEnumDescription(x.Status).Contains(searchString, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
        Console.WriteLine($"Filtered Users Count: {filteredUsers.Count}");
    }

    public void Dispose()
    {
        Console.WriteLine("Disposing resources...");
        _cts?.Cancel();
        _cts?.Dispose();
    }
}