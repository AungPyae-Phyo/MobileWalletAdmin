@page "/kyc-management/status-edit/{Id}"
@using MobileWalletAdmin.Enum
@using MobileWalletAdmin.Helper
@using MobileWalletAdmin.Models.KYC
@using MobileWalletAdmin.Services
@inject KYCService KYCService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<MudBreadcrumbs Items="_breadcrumbItems" Separator="/" />

<MudPaper Class="pa-6 mt-4" Elevation="1">
    <MudText Typo="Typo.h6" Class="mb-4">Change Account Status</MudText>

    <MudGrid>
        <MudItem xs="12" Class="mb-4">
            <MudText Typo="Typo.subtitle2"><b>Account Status:</b></MudText>
            <MudSelect T="string" @bind-Value="selectedStatus" Variant="Variant.Outlined" Class="mt-2" Style="width: 100%">
                @foreach (var status in Enum.GetValues(typeof(BankStatus)))
                {
                    <MudSelectItem Value="@status.ToString()">@EnumHelper.GetEnumDescription((BankStatus)status)</MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="12" Class="mb-4">
            <MudText Typo="Typo.subtitle2"><b>Remark:</b></MudText>
            <MudTextField Variant="Variant.Outlined" 
            Label="Enter remark" 
            @bind-Value="remark" 
            Class="mt-2" 
            Lines="3"
            Style="width: 100%" />
        </MudItem>

        <MudItem xs="12" Class="d-flex justify-end mt-4">
            <MudButton Variant="Variant.Text" 
            Color="Color.Default"
            OnClick="@(() => Navigation.NavigateTo($"/kyc-management/kyc-detail/{Id}"))"
            Class="mr-2">
                Cancel
            </MudButton>
            <MudButton Variant="Variant.Filled" 
            Color="Color.Primary" 
            OnClick="SaveStatus">
                Save
            </MudButton>
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    [Parameter]
    public string Id { get; set; }
    private bool isSaving;
    private KYCModel kyc = new();
    private string selectedStatus;
    private string remark;
    private List<BreadcrumbItem> _breadcrumbItems;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            kyc = await KYCService.GetById(Id, new CancellationTokenSource().Token);
            if (kyc == null)
            {
                Snackbar.Add("KYC record not found", Severity.Error);
                Navigation.NavigateTo("/kyc-management");
                return;
            }

            selectedStatus = kyc.Status.ToString();
           

            _breadcrumbItems = new List<BreadcrumbItem>
            {
                new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
                new BreadcrumbItem("KYC Management", href: "/kyc-management"),
                new BreadcrumbItem("Detail", href: $"/kyc-management/kyc-detail/{Id}"),
                new BreadcrumbItem("Update Status", href: null, disabled: true)
            };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading KYC data: {ex.Message}", Severity.Error);
        }
    }

    private async Task SaveStatus()
    {
        if (Enum.TryParse<BankStatus>(selectedStatus, out var newStatus))
        {
            isSaving = true;
            try
            {
                var updateStatus = new KYCModel
                    {
                        Id = Id,
                        Status = newStatus,
                   
                        LastModifiedOn = DateTime.UtcNow,
                        LastModifiedBy = "Admin"
                    };

                var success = await KYCService.UpdateStatus(Id, updateStatus);

                if (success)
                {
                    Snackbar.Add("Status updated successfully!", Severity.Success, config =>
                  {
                      config.VisibleStateDuration = 2000; // 3 seconds
                      config.HideTransitionDuration = 500;
                      config.ShowTransitionDuration = 500;
                  });

                    await Task.Delay(3500);

                    // Navigate without forceLoad (better user experience)
                    Navigation.NavigateTo($"/kyc-management/kyc-detail/{Id}");
                }
                else
                {
                    Snackbar.Add("Failed to update status", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            }
            finally
            {
                isSaving = false;
            }
        }
    }
}