@page "/kyc-management"
@using MobileWalletAdmin.Enum
@using MobileWalletAdmin.Helper
@using MobileWalletAdmin.Models.KYC
@using MobileWalletAdmin.Services
@inject KYCService KYCService

@inject NavigationManager Navigation
<PageTitle>KYC Management</PageTitle>
<MudText Typo="Typo.h4" GutterBottom="true">KYC Management</MudText>
<MudBreadcrumbs>
    <MudBreadcrumbItem Text="Home" Href="/" />
    <MudBreadcrumbItem Text="KYC Management" Href="/kyc-management" />
    @if (!string.IsNullOrEmpty(SelectedUserId))
    {
        <MudBreadcrumbItem Text="KYC Detail" Href="@($"kyc-management/kyc-detail/{SelectedUserId}")" />
    }
</MudBreadcrumbs>
<MudPaper Class="d-flex flex-wrap gap-2 my-6">
    <!-- All Button -->
    <MudButton Variant="@(string.IsNullOrEmpty(selectedStatus) ? Variant.Outlined : Variant.Text)"
               Color="@(string.IsNullOrEmpty(selectedStatus) ? Color.Primary : Color.Default)"
               OnClick="@(() => OnStatusChanged(""))"
               Class="mt-3 mb-3 ml-3"
               StartIcon="@Icons.Material.Filled.FilterAlt">
        All
    </MudButton>

    <!-- Status Filter Buttons -->
    @foreach (BankStatus status in Enum.GetValues(typeof(BankStatus)))
    {
        var statusValue = status.ToString();
        <MudButton Variant="@(selectedStatus == statusValue ? Variant.Outlined : Variant.Text)"
                   Color="@(selectedStatus == statusValue ? EnumHelper.GetStatusColor(status) : Color.Default)"
                   OnClick="@(() => OnStatusChanged(statusValue))"
                   Class="mt-3 mb-3 ml-3">
            @EnumHelper.GetEnumDescription(status)
        </MudButton>
    }
</MudPaper>


@if (filterKYC == null || !filterKYC.Any())
{
    <MudAlert Severity="Severity.Warning"> No KYC data found for the selected status.</MudAlert>
}
else
{
    <MudTable Items="@filterKYC"
              Bordered="false"
              Hover="true"
              SortLabel="Sort By"
              Elevation="0"
              AllowUnsorted="false"
              Dense="false"
              Breakpoint="Breakpoint.None"
              Style="table-layout: fixed; width: 100%;"
              OnRowClick="EventCallback.Factory.Create<TableRowClickEventArgs<KYCModel>>(this, OnRowClicked)"
              RowStyleFunc="@( (row, index) => "cursor: pointer;" )">

        <HeaderContent>
            <MudTh Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis; width: 60px;">No.</MudTh>
            <MudTh>Request Date & Time</MudTh>
            <MudTh>User Name</MudTh>
            <MudTh>Identity</MudTh>
            <MudTh>Last Modified Date & Time</MudTh>
            <MudTh>KYC Status</MudTh>
            <MudTh>Date of Birth</MudTh>
            <MudTh>Approved By</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Style="white-space: nowrap;" Class="font-weight-medium">@(filterKYC.IndexOf(context) + 1)</MudTd>
            <MudTd DataLabel="Request Date">@context.createdOn</MudTd>
            <MudTd DataLabel="User Name">@context.Name</MudTd>
            <MudTd DataLabel="Identity">@context.Identity</MudTd>
            <MudTd DataLabel="Last Modified">@context.LastModifiedOn</MudTd>
            <MudTd>@GetStatusChip(context.Status)</MudTd>

            <MudTd DataLabel="Date of Birth">@context.DOB?.ToString("dd/MM/yyyy")</MudTd>
            <MudTd DataLabel="Approved By">@context.LastModifiedBy</MudTd>
        </RowTemplate>
    </MudTable>
}
@code {
    private List<KYCModel> kyc = new();
    private string SelectedUserId { get; set; }
    private List<KYCModel> filterKYC = new();
    private string selectedStatus = "";
    private CancellationTokenSource? _cts;
    protected override async Task OnInitializedAsync()
    {
        _cts = new CancellationTokenSource();
        Console.WriteLine("Initializing User List...");
        try
        {
            kyc = await KYCService.GetAll(_cts.Token);
            // filterKYC = kyc.ToList();
            FilterKYCList();
            Console.WriteLine($"Fetched {kyc.Count} KYC Users");
            await InvokeAsync(StateHasChanged);
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("Operation was canceled.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void OnStatusChanged(string value)
    {
        selectedStatus = value;
        FilterKYCList();
    }

    private void FilterKYCList()
    {
        if (string.IsNullOrEmpty(selectedStatus))
        {
            filterKYC = kyc.ToList();
        }
        else if (Enum.TryParse<BankStatus>(selectedStatus, out var status))
        {
            filterKYC = kyc.Where(k => k.Status == status).ToList();
        }
        StateHasChanged();
    }

    private RenderFragment GetStatusChip(BankStatus status) => builder =>
       {
           var statusText = EnumHelper.GetEnumDescription(status);
           var (color, icon) = GetStatusStyle(status);
           builder.OpenComponent<MudChip<string>>(0);
           builder.AddAttribute(1, "Color", color);
           builder.AddAttribute(2, "Variant", Variant.Text);
           builder.AddAttribute(3, "Class", "ma-1");
           builder.AddAttribute(4, "ChildContent", (RenderFragment)(chipBuilder =>
       {
           if (!string.IsNullOrEmpty(icon))
           {
               chipBuilder.OpenComponent<MudIcon>(0);
               chipBuilder.AddAttribute(1, "Icon", icon);
               chipBuilder.AddAttribute(2, "Class", "mr-1");
               chipBuilder.CloseComponent();
           }
           chipBuilder.AddContent(4, statusText);
       }));
           builder.CloseComponent();
       };

    private (Color Color, string Icon) GetStatusStyle(BankStatus status)
    {
        return status switch
        {
            BankStatus.NEW_USER => (Color.Default, Icons.Material.Filled.Person),
            //BankStatus.NEW_USER => (Color.Success, Icons.Material.Filled.CheckCircle),
            BankStatus.ACTIVE => (Color.Success, Icons.Material.Filled.CheckCircle),
            BankStatus.INACTIVE => (Color.Default, Icons.Material.Filled.PersonOff),
            BankStatus.PENDING => (Color.Warning, Icons.Material.Filled.Pending),
            BankStatus.SUSPENDED => (Color.Error, Icons.Material.Filled.Block),
            BankStatus.APPROVE => (Color.Info, Icons.Material.Filled.Verified),
            BankStatus.REJECT => (Color.Error, Icons.Material.Filled.Cancel),
            _ => (Color.Default, Icons.Material.Filled.Help)
        };
    }
    private void OnRowClicked(TableRowClickEventArgs<KYCModel> args)
    {
        SelectedUserId = args.Item.Id.ToString();
        Navigation.NavigateTo($"kyc-management/kyc-detail/{SelectedUserId}");
    }

    private Color GetStatusColor(string status)
    {
        return status switch
        {
            "Pending" => Color.Warning,
            "Approved" => Color.Success,
            "Rejected" => Color.Error,
            _ => Color.Default
        };
    }
}