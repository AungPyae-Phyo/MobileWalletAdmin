@page "/kyc-management/kyc-detail/{Id}"
@using MobileWalletAdmin.Helper
@using MobileWalletAdmin.Models.KYC
@using MobileWalletAdmin.Models.Users
@using MobileWalletAdmin.Services
@inject KYCService KYCService
@inject UserService UserService
@inject NavigationManager Navigation

<MudBreadcrumbs Items="_breadcrumbItems" Separator="/" />

<MudText Typo="Typo.h6" Class="mt-4 mb-2">Customer Information</MudText>

<!-- Header Section -->
<MudPaper Class="p-6 mb-12 d-flex justify-start align-center" Elevation="2">

    <MudText Class="ml-6 mt-6 mb-6"><b>Customer ID :</b> @kyc.UserID</MudText>
    <span class="ml-12"></span>
    <MudText>|</MudText>
    <span class="ml-12"></span>


    <MudText><b>User Type :</b> Customer</MudText>
    <span class="ml-12"></span>


    <MudText>|</MudText>
    <span class="ml-12"></span>
    
        <b>Status :</b>
       <span class="ml-2">
            <MudText Color="@EnumHelper.GetStatusColor(kyc.Status)"> @EnumHelper.GetEnumDescription(kyc.Status) </MudText>
       </span>
      
     <span class="ml-12"></span>
<MudButton Variant="Variant.Filled"
           Color="Color.Primary"
           StartIcon="@Icons.Material.Filled.Edit"
           OnClick="@(() => Navigation.NavigateTo($"/kyc-management/status-edit/{Id}"))">
    Edit
</MudButton>
</MudPaper>

<!-- Customer Details Section -->
<MudPaper Class="pa-6 rounded-lg shadow-sm bg-grey-lighten-5" Style="width: 50%;">
    <MudGrid>
        <MudItem xs="12" Class="mb-3">
            <MudText Typo="Typo.subtitle1" Class="mb-2" Color="Color.Primary">Customer Details</MudText>
        </MudItem>

        <MudItem xs="12" Class="d-flex mb-3">
            <MudText Class="mr-2" Style="min-width: 140px;"><b>Customer Name:</b></MudText>
            <MudText>@currentUser?.UserName</MudText>
        </MudItem>

        <MudItem xs="12" Class="d-flex mb-3">
            <MudText Class="mr-2" Style="min-width: 140px;"><b>Phone Number:</b></MudText>
            <MudText>@(string.IsNullOrEmpty(currentUser?.PhoneNumber) ? "-" : currentUser?.PhoneNumber)</MudText>
        </MudItem>

        <MudItem xs="12" Class="d-flex mb-3">
            <MudText Class="mr-2" Style="min-width: 140px;"><b>Date of Birth:</b></MudText>
            <MudText>@(kyc.DOB?.ToString("dd/MM/yyyy") ?? "-")</MudText>
        </MudItem>

        <MudItem xs="12" Class="d-flex mb-3">
            <MudText Class="mr-2" Style="min-width: 140px;"><b>Father's Name:</b></MudText>
            <MudText>@(string.IsNullOrEmpty(kyc.FatherName) ? "-" : kyc.FatherName)</MudText>
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    [Parameter]
    public string Id { get; set; }

    private KYCModel kyc = new();
    private List<UserModel> users = new(); 
    private CancellationTokenSource? _cts;
    private UserModel? currentUser => users.FirstOrDefault(u => u.UserID == kyc.UserID);

    protected override async Task OnInitializedAsync()
    {
        _cts = new CancellationTokenSource();
        try
        {
            // Call both API endpoints
            var kycTask = KYCService.GetById(Id, _cts.Token);
            var userTask = UserService.GetAll(_cts.Token);

            // Wait for both at once (faster)
            await Task.WhenAll(kycTask, userTask);

            // Assign results
            kyc = await kycTask;
            users = await userTask;

            await InvokeAsync(StateHasChanged);
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("Operation was canceled.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private List<BreadcrumbItem> _breadcrumbItems = new()
    {
        new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("KYC Management", href: "/kyc-management"),
        new BreadcrumbItem("Detail", href: null, disabled: true)
    };

    private Color GetStatusColor(string status)
    {
        return status?.ToUpper() switch
        {
            "PENDING" => Color.Warning,
            "APPROVED" => Color.Success,
            "REJECTED" => Color.Error,
            _ => Color.Default
        };
    }
}