@page "/user-lists"
@using MobileWalletAdmin.Enum
@using MobileWalletAdmin.Helper
@using MobileWalletAdmin.Models
@using MobileWalletAdmin.Models.Users
@using MobileWalletAdmin.Services
@using System.Linq
@inject UserService UserService
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar
<PageTitle>User Lists</PageTitle>
<MudText Typo="Typo.h5" GutterBottom="true">User Lists</MudText>
@if (users == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <div style="min-width: 1200px;">
        @* <MudPaper Class="d-flex justify-end pa-2"> *@
        @*     <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="ExportExcel" StartIcon="@Icons.Material.Filled.FileDownload">Export Excel</MudButton> *@
        @*     <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="ExportPDF" StartIcon="@Icons.Material.Filled.PictureAsPdf" Class="ml-2">Export PDF</MudButton> *@
        @* </MudPaper> *@
        <MudTable Items="@filteredUsers" Hover="true" SortLabel="Sort By" Elevation="0" id="kyc-table"
                  AllowUnsorted="false" Dense="false" Breakpoint="Breakpoint.None" Style="table-layout: fixed; width: 100%;">
            <ToolBarContent>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search..."
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium" Immediate="true" OnInput="@(() => OnSearch(searchString))" />
            </ToolBarContent>

            <HeaderContent>
                <MudTh Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis; width: 60px;">No.</MudTh>
                <MudTh Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis; width: 160px;">
                    <MudTableSortLabel SortBy="@((UserModel x) => x.createdOn)">Registration Date</MudTableSortLabel>
                </MudTh>
                <MudTh Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis; width: 150px;">
                    <MudTableSortLabel SortBy="@((UserModel x) => x.UserName)">User Name</MudTableSortLabel>
                </MudTh>
                <MudTh Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis; width: 140px;">
                    <MudTableSortLabel SortBy="@((UserModel x) => x.PhoneNumber)">Phone Number</MudTableSortLabel>
                </MudTh>
                <MudTh Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis; width: 200px;">
                    <MudTableSortLabel SortBy="@((UserModel x) => x.Email)">Email</MudTableSortLabel>
                </MudTh>
                <MudTh Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis; width: 120px;">
                    <MudTableSortLabel SortBy="@((UserModel x) => x.Role)">Role</MudTableSortLabel>
                </MudTh>
                <MudTh Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis; width: 140px;">
                    <MudTableSortLabel SortBy="@((UserModel x) => x.Status)">KYC Status</MudTableSortLabel>
                </MudTh>
                <MudTh Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis; width: 150px;">
                    <MudTableSortLabel SortBy="@((UserModel x) => x.DocumentType)">Document Type</MudTableSortLabel>
                </MudTh>
                <MudTh Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis; width: 180px;">
                    <MudTableSortLabel SortBy="@((UserModel x) => x.AccountNumber)">Account Number</MudTableSortLabel>
                </MudTh>
                <MudTh Style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis; width: 120px; text-align: right;">
                    <MudTableSortLabel SortBy="@((UserModel x) => x.Balance)">Balance</MudTableSortLabel>
                </MudTh>
            </HeaderContent>

            <RowTemplate Context="user">
                <MudTd Style="white-space: nowrap;" Class="font-weight-medium">@(filteredUsers.IndexOf(user) + 1)</MudTd>
                <MudTd Style="white-space: nowrap;">@user.createdOn.ToString("dd/MM/yyyy HH:mm:ss")</MudTd>
                <MudTd Style="white-space: nowrap; text-overflow: ellipsis; overflow: hidden;">@user.UserName</MudTd>
                <MudTd Style="white-space: nowrap;">@user.PhoneNumber</MudTd>
                <MudTd Style="white-space: nowrap; text-overflow: ellipsis; overflow: hidden;">@user.Email</MudTd>
                <MudTd Style="white-space: nowrap;">@user.Role</MudTd>
                <MudTd Style="white-space: nowrap;">@GetStatusChip(user.Status)</MudTd>
                <MudTd Style="white-space: nowrap;">@EnumHelper.GetEnumDescription(user.DocumentType)</MudTd>
                <MudTd Style="white-space: nowrap;">
                    <MudTooltip Text="Click to copy" Placement="Placement.Bottom">
                        <span style="font-family: monospace; cursor: pointer;" @onclick="() => CopyToClipboard(user.AccountNumber)">
                            @user.AccountNumber
                            <MudIcon Icon="@Icons.Material.Filled.ContentCopy" Size="Size.Small" />
                        </span>
                    </MudTooltip>
                </MudTd>
                <MudTd Style="white-space: nowrap; text-align: right;" Class="font-weight-bold">
                    $@user.Balance.ToString("N0")
                </MudTd>

            </RowTemplate>

            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </div>
}

@code {
    private List<UserModel> users = new();
    private List<UserModel> filteredUsers = new();
    private string searchString = "";
    private CancellationTokenSource? _cts;
    private bool hasConnectionError = false;

    protected override async Task OnInitializedAsync()
    {
        _cts = new CancellationTokenSource();
        Console.WriteLine("Initializing User List...");
        try
        {
            users = await UserService.GetAll(_cts.Token);
            filteredUsers = users.ToList();
            Console.WriteLine($"Fetched {users.Count} users");
            await InvokeAsync(StateHasChanged);
        }
        catch (OperationCanceledException)
        {
            Console.WriteLine("Operation was canceled.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private RenderFragment GetStatusChip(BankStatus status) => builder =>
    {
        var statusText = EnumHelper.GetEnumDescription(status);
        var (color, icon) = GetStatusStyle(status);
        builder.OpenComponent<MudChip<string>>(0); 
        builder.AddAttribute(1, "Color", color);
        builder.AddAttribute(2, "Variant", Variant.Text);
        builder.AddAttribute(3, "Class", "ma-1");
        builder.AddAttribute(4, "ChildContent", (RenderFragment)(chipBuilder =>
        {
            if (!string.IsNullOrEmpty(icon))
            {
                chipBuilder.OpenComponent<MudIcon>(0);
                chipBuilder.AddAttribute(1, "Icon", icon);
                chipBuilder.AddAttribute(2, "Class", "mr-1");
                chipBuilder.CloseComponent();
            }
            chipBuilder.AddContent(4, statusText);
        }));
        builder.CloseComponent();
    };

    private (Color Color, string Icon) GetStatusStyle(BankStatus status)
    {
        Console.WriteLine($"Processing status: {status}");
        return status switch
        {
            BankStatus.NEW_USER => (Color.Default, Icons.Material.Filled.Person),
            //BankStatus.NEW_USER => (Color.Success, Icons.Material.Filled.CheckCircle),
            BankStatus.ACTIVE => (Color.Success, Icons.Material.Filled.CheckCircle),
            BankStatus.INACTIVE => (Color.Default, Icons.Material.Filled.PersonOff),
            BankStatus.PENDING => (Color.Warning, Icons.Material.Filled.Pending),
            BankStatus.SUSPENDED => (Color.Error, Icons.Material.Filled.Block),
            BankStatus.APPROVE => (Color.Info, Icons.Material.Filled.Verified),
            BankStatus.REJECT => (Color.Error, Icons.Material.Filled.Cancel),
            _ => (Color.Default, Icons.Material.Filled.Help)
        };
    }
 
    private async Task CopyToClipboard(string text)
    {
        try
        {
            await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
            Snackbar.Add("Account number copied!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to copy account number", Severity.Error);
            Console.WriteLine($"Copy failed: {ex.Message}");
        }
    }

    private void OnSearch(string text)
    {
        Console.WriteLine($"Search input: {text}");
        searchString = text;
        if (string.IsNullOrWhiteSpace(searchString))
        {
            filteredUsers = users.ToList();
        }
        else
        {
            filteredUsers = users.Where(x =>
                (x.UserName?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (x.Email?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (x.PhoneNumber?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (x.AccountNumber?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (x.Role?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
                EnumHelper.GetEnumDescription(x.Status).Contains(searchString, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
        Console.WriteLine($"Filtered Users Count: {filteredUsers.Count}");
    }

    public void Dispose()
    {
        Console.WriteLine("Disposing resources...");
        _cts?.Cancel();
        _cts?.Dispose();
    }
  

}